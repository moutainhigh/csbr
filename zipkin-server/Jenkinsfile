pipeline {
    agent any
    //maven代理（直接从官网拉取maven镜像）
    //agent {
        //docker {
            //image 'maven:3-alpine'
            //args '-v /root/.m2:/root/.m2'
        //}
    //}
    //环境定义
    environment{

        def SRCCODE_DIR = "/var/jenkins_home/workspace/${env.JOB_NAME}"
        def DAILYCI_DIR = "/var/ciOutput/dailyCiOutput"
        SVN_FOLD = "zipkin-server"
    }
    //定时任务
    //triggers { pollSCM('H 4/* 0 0 1-5') }
    //triggers {
        //每天凌晨2点自动构建
    //    cron('H 2 * * *')
    //}
    //全局定义工具
    tools {
        //工具名称必须在Jenkins 管理Jenkins → 全局工具配置中预配置。
        maven 'maven3'
    }
    stages {
        //构建
        stage('Build') {
            steps {
                //sh './gradlew build'
                 //执行shell命令
                 sh 'echo ${JAVA_HOMOE}'
                 sh 'mvn -f ./pom.xml clean package -Dmaven.test.skip=true -X'
                 //sh 'mvn -f ${SVN_FOLD}/pom.xml clean package'
            }
        }
        //测试(暂时不用)
        //stage('Test') {
            //steps {
                //sh './gradlew check'
                //sh 'mvn -f ${SVN_FOLD}/pom.xml test'
                //sh 'mvn -f ${SVN_FOLD}/pom.xml test'
            //}
        //}
        //部署
        stage('Deploy') {
            steps {
                echo 'Deploying'
                //分分支部署
                script{
                    if(env.BRANCH_NAME=='develop'){
                        //develop分支环境
                        echo 'start to deploy ${SVN_FOLD} on develop ...'
                        //调用Publish Over SSH插件，上传docker-compose.yaml文件并且执行deploy脚本
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'csbr', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sh /mnt/zipkin-server/developbuild.sh', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/mnt/csbr/data', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'output/*.*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                        echo 'Depoly ${SVN_FOLD} success ...'
                    }else if(env.BRANCH_NAME=='release'){
                        //release分支环境
                        echo 'start to deploy ${SVN_FOLD} on release ...'
                        //调用Publish Over SSH插件，上传docker-compose.yaml文件并且执行deploy脚本
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'csbr', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sh /mnt/zipkin-server/releasebuild.sh', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/mnt/csbr/data', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'output/*.*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                        echo 'Depoly ${SVN_FOLD} success on release ...'
                    }else if(env.BRANCH_NAME=='master'){
                        //master分支
                        echo 'start to deploy ${SVN_FOLD} on master...'
                        //调用Publish Over SSH插件，上传docker-compose.yaml文件并且执行deploy脚本
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'csbr', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sh /mnt/zipkin-server/masterbuild.sh', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/mnt/csbr/data', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'output/*.*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                        echo 'Depoly ${SVN_FOLD} success on master ...'
                    }
                }
                //sh './build.sh'
            }
        }
    }

    //归档
    post {
        always {
            echo 'Archive artifacts'
            archiveArtifacts artifacts: "**/target/*.jar", excludes: "**/target"
        }
    }


}